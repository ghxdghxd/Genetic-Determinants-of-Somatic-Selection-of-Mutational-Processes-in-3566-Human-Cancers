a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
pa = ggboxplot(a[!is.na(a$snp), ], x="snp", y="sig", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = signature, xlab = snp) +
stat_pvalue_manual(a %>% t_test(sig ~ snp) %>% add_xy_position(x = "dose"),
size = 2, tip.length = 0.01, label = "p.adj")
pd = ggboxplot(b[!is.na(b$snp), ], x="snp", y="mRNA", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = paste(gene, "expression"), xlab = snp) +
stat_pvalue_manual(b %>% t_test(mRNA ~ snp) %>% add_xy_position(x = "dose"),
tip.length = 0.01, label = "p.adj", size = 2, angle = 0)
p = ggarrange(pa, pd, ncol = 2, align='hv')
return(p)
})
return(p_list)
}
com_plot2(IV_sig, cancer = "panCan", chrom = "chr20", nrows = 6)
snp = IV_sig$snp[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
a
head(a)
gene
IV_sig$cis_gene
com_plot2 = function(IV_sig, cancer, chrom, nrows){
p_list = lapply(nrows, function(x){
snp = IV_sig$snp[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$cis_gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
pa = ggboxplot(a[!is.na(a$snp), ], x="snp", y="sig", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = signature, xlab = snp) +
stat_pvalue_manual(a %>% t_test(sig ~ snp) %>% add_xy_position(x = "dose"),
size = 2, tip.length = 0.01, label = "p.adj")
pd = ggboxplot(b[!is.na(b$snp), ], x="snp", y="mRNA", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = paste(gene, "expression"), xlab = snp) +
stat_pvalue_manual(b %>% t_test(mRNA ~ snp) %>% add_xy_position(x = "dose"),
tip.length = 0.01, label = "p.adj", size = 2, angle = 0)
p = ggarrange(pa, pd, ncol = 2, align='hv')
return(p)
})
return(p_list)
}
com_plot2(IV_sig, cancer = "panCan", chrom = "chr20", nrows = 6)
IV_sig
head(IV_sig)
com_plot2 = function(IV_sig, cancer, chrom, nrows){
p_list = lapply(nrows, function(x){
snp = IV_sig$chr_pos_ref_alt[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$cis_gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
pa = ggboxplot(a[!is.na(a$snp), ], x="snp", y="sig", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = signature, xlab = snp) +
stat_pvalue_manual(a %>% t_test(sig ~ snp) %>% add_xy_position(x = "dose"),
size = 2, tip.length = 0.01, label = "p.adj")
pd = ggboxplot(b[!is.na(b$snp), ], x="snp", y="mRNA", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = paste(gene, "expression"), xlab = snp) +
stat_pvalue_manual(b %>% t_test(mRNA ~ snp) %>% add_xy_position(x = "dose"),
tip.length = 0.01, label = "p.adj", size = 2, angle = 0)
p = ggarrange(pa, pd, ncol = 2, align='hv')
return(p)
})
return(p_list)
}
com_plot2(IV_sig, cancer = "panCan", chrom = "chr20", nrows = 6)
library(rstatix)
com_plot2(IV_sig, cancer = "panCan", chrom = "chr20", nrows = 6)
t_test()
?t_test()
snp = IV_sig$chr_pos_ref_alt[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$cis_gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
a
head(a)
head(b)
head(c)
head(c$sig)
unique(c$sig)
logSigMat
head(logSigMat)
head(geno[,1:4])
geno
head(geno)
logSigMat <- read.table("../TableS1/SupplementaryTable_S1.csv", header = T, sep= "\t", stringsAsFactors = F)
head(logSigMat)
logSigMat <- read.table("../TableS1/SupplementaryTable_S1.csv", header = T, sep= "\t", stringsAsFactors = F)
rownames(logSigMat) = logSigMat$SampleID
logSigMat = logSigMat[rownames(geno), paste0("MP", 1:6)]
head(logSigMat)
com_plot2 = function(IV_sig, cancer, chrom, nrows){
p_list = lapply(nrows, function(x){
snp = IV_sig$chr_pos_ref_alt[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$cis_gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
pa = ggboxplot(a[!is.na(a$snp), ], x="snp", y="sig", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = signature, xlab = snp) +
stat_pvalue_manual(a %>% t_test(sig ~ snp) %>% add_xy_position(x = "dose"),
size = 2, tip.length = 0.01, label = "p.adj")
pd = ggboxplot(b[!is.na(b$snp), ], x="snp", y="mRNA", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = paste(gene, "expression"), xlab = snp) +
stat_pvalue_manual(b %>% t_test(mRNA ~ snp) %>% add_xy_position(x = "dose"),
tip.length = 0.01, label = "p.adj", size = 2, angle = 0)
p = ggarrange(pa, pd, ncol = 2, align='hv')
return(p)
})
return(p_list)
}
com_plot2(IV_sig, cancer = "panCan", chrom = "chr20", nrows = 6)
com_plot2(IV_sig, cancer = "panCan", chrom = "chr6", nrows = 13)
com_plot2 = function(IV_sig, cancer, chrom, nrows){
p_list = lapply(nrows, function(x){
snp = IV_sig$chr_pos_ref_alt[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$cis_gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
pa = ggboxplot(a[!is.na(a$snp), ], x="snp", y="sig", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = signature, xlab = paste0(snp, "\n", ID)) +
stat_pvalue_manual(a %>% t_test(sig ~ snp) %>% add_xy_position(x = "dose"),
size = 2, tip.length = 0.01, label = "p.adj")
pd = ggboxplot(b[!is.na(b$snp), ], x="snp", y="mRNA", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = paste(gene, "expression"), xlab = paste0(snp, "\n", ID)) +
stat_pvalue_manual(b %>% t_test(mRNA ~ snp) %>% add_xy_position(x = "dose"),
tip.length = 0.01, label = "p.adj", size = 2, angle = 0)
p = ggarrange(pa, pd, ncol = 2, align='hv')
return(p)
})
return(p_list)
}
com_plot2(IV_sig, cancer = "panCan", chrom = "chr6", nrows = 13)
library(rstatix)
IV_sig <- read.table("../TableS3/SupplementaryTable_S3B.csv", header=T,sep="\t", stringsAsFactors = F)
logSigMat <- read.table("../TableS1/SupplementaryTable_S1.csv", header = T, sep= "\t", stringsAsFactors = F)
rownames(logSigMat) = logSigMat$SampleID
load("mRNA_and_geno.RData")
logSigMat = logSigMat[rownames(geno), paste0("MP", 1:6)]
com_plot2 = function(IV_sig, cancer, chrom, nrows){
p_list = lapply(nrows, function(x){
snp = IV_sig$chr_pos_ref_alt[x]
ID = str_split(IV_sig$rsid[x], pattern=":")[[1]][1]
signature = IV_sig$mutational_propensity[x]
gene = IV_sig$cis_gene[x]
a = data.frame(sig = logSigMat[, signature], snp = geno[, snp])
int = intersect(rownames(geno), rownames(mRNA))
b = data.frame(snp = geno[int, snp], mRNA = mRNA[int, gene])
c = data.frame(mRNA = mRNA[int, gene], sig = logSigMat[int, signature])
pa = ggboxplot(a[!is.na(a$snp), ], x="snp", y="sig", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = signature, xlab = paste0(snp, "\n", ID)) +
stat_pvalue_manual(a %>% t_test(sig ~ snp) %>% add_xy_position(x = "dose"),
size = 2, tip.length = 0.01, label = "p.adj")
pd = ggboxplot(b[!is.na(b$snp), ], x="snp", y="mRNA", shape = 1, bxp.errorbar= T, outlier.shape = NA, width = 0.5,#add.params = list(size=0.5),
ylab = paste(gene, "expression"), xlab = paste0(snp, "\n", ID)) +
stat_pvalue_manual(b %>% t_test(mRNA ~ snp) %>% add_xy_position(x = "dose"),
tip.length = 0.01, label = "p.adj", size = 2, angle = 0)
p = ggarrange(pa, pd, ncol = 2, align='hv')
return(p)
})
return(p_list)
}
p1 = com_plot2(IV_sig, cancer = "panCan", chrom = "chr20", nrows = 6)
p1
p2 = com_plot2(IV_sig, cancer = "panCan", chrom = "chr6", nrows = 13)
pdf("Figure6BCDE.pdf", width = 6, height = 8)
plot_grid(p1[[1]], p2[[1]], ncol = 1)
dev.off()
pdf("Figure6BCDE.pdf", width = 6, height = 6)
plot_grid(p1[[1]], p2[[1]], ncol = 1)
dev.off()
dim(IV_sig)
dim(logSigMat)
setwd("~/aData/Genetic-Determinants-of-the-Somatic-Selection-of-Mutational-Processes-in-3-566-Human-Cancers/4_Figure_tables/FigureS2")
library(GenomicRanges, BSgenome.Hsapiens.UCSC.hg19)
library(pmsignature)
library(ggplot2)
library(cowplot)
library(parallel)
RData_list = list.files(".", ".sig.*.RData$", full.names=T)
estimate_mat <- as.data.frame(t(sapply(RData_list, function(x){
load(x)
return(c(Signature_num, likelihood, error, max.corr))
})))
colnames(estimate_mat) <- c("K", "likelihood", "error", "max.corr")
ggplot(estimate_mat) + geom_line(aes(x = K, y = likelihood)) +
geom_point(aes(x = K, y = likelihood), size = 4, shape = 20) +
# labs(title="The Estimated Log Likelihood") +
xlab("Signature Number") + ylab("Log Likelihood") +
scale_x_continuous(breaks = 2:13) +
theme_bw() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold"))
p1 = ggplot(estimate_mat) + geom_line(aes(x = K, y = likelihood)) +
geom_point(aes(x = K, y = likelihood), size = 4, shape = 20) +
# labs(title="The Estimated Log Likelihood") +
xlab("Signature Number") + ylab("Log Likelihood") +
scale_x_continuous(breaks = 2:13) +
theme_bw() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold"))
p2 = ggplot(estimate_mat) + geom_line(aes(x = K, y = error)) +
geom_point(aes(x = K, y = error), size = 4, shape = 20) +
# labs(title = "The Estimated Bootstrap Error") +
xlab("Signature Number") + ylab("Bootstrap Error") +
scale_x_continuous(breaks = 2:13) +
theme_bw() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold"))
p3 = ggplot(estimate_mat) + geom_line(aes(x = K, y = max.corr)) +
geom_point(aes(x = K, y = max.corr), size = 4, shape = 20) +
# labs(title="The Estimated Maximum correlation coefficient") +
xlab("Signature Number") + ylab("Maximum correlation coefficient") +
scale_x_continuous(breaks = 2:13) +
theme_bw() +
theme(axis.text = element_text(size = 10),
axis.title = element_text(size = 12, face = "bold"),
plot.title = element_text(size = 12, face = "bold"))
p1
p2
p3
pdf("FigureS2ABC.pdf", width = 10,height = 3)
plot_grid(p1, p2, p3, nrow = 1, align = "hv")
dev.off()
file_cosmicSig = "sigProfiler_SBS_signatures_2019_05_22_Vignettes.csv"
cosmicSig <- read.table(file_cosmicSig, header = T, sep = ",", stringsAsFactors = F)
rownames(cosmicSig) = paste0(substr(cosmicSig$SubType,1,1),"[", cosmicSig$Type, "]", substr(cosmicSig$SubType,3,3))
cosmicSig = cosmicSig[, grep("\\d",colnames(cosmicSig))]
colnames(cosmicSig) = gsub("^[A-Za-z]+","", colnames(cosmicSig))
plotHeatmap = function(sig_mat, cosmicSig, cosmicSig_list = NULL, plot=T, fontsize = 10, CS = 0.75, sortSig = NULL, plot_margin = c(0,0,0,0)){
Signature_num = ncol(sig_mat)
rownames(sig_mat)<- sub("([ACGTN])([ACGTN]) ([ATCG]).([ATCG])", "\\3[\\1>\\2]\\4", rownames(sig_mat))
sig_mat <-cbind(sig_mat, cosmicSig[match(rownames(sig_mat), rownames(cosmicSig)),])
corr.sig <- sapply(colnames(sig_mat)[1:Signature_num], function(x){
return(sapply(colnames(cosmicSig), function(y){
return(cosine(sig_mat[, x], sig_mat[, y]))
}))
})
if(!plot){
return(corr.sig)
}
m <- melt(corr.sig, varnames = c("A","B"))
m$lab = signif(m$value, 2)
m$lab[which(m$lab < CS)] <- ""
if(!is.null(sortSig)){
m$B <- factor(m$B, levels = sortSig)
}
# hm.palette <- colorRampPalette(rev(brewer.pal(11, 'Spectral')), space='Lab')
# actual <- c('#2F2C62', '#42399B', '#4A52A7', '#59AFEA', '#7BCEB8', '#A7DA64',
#             '#EFF121', '#F5952D', '#E93131', '#D70131', '#D70131') #, '#000000')
# hm.palette <- colorRampPalette(actual, space='Lab')
p_heat <- ggplot(m, aes(x = B, y = A, fill = value)) + geom_tile(color="white", size=0.1) +
geom_text(aes(label=lab), size = fontsize * 4/14, color = "white") +
scale_fill_gradient2(low = "white", high = "grey10") +
labs(y = "COSMIC SBS Signatures", x = "") +
# scale_x_discrete() +
scale_y_discrete(position = "left", breaks = levels(factor(m$A)),
labels = levels(factor(m$A))) +
theme(axis.text.x = element_text(hjust = 0, size = fontsize, angle = -60),
axis.text.y = element_text(hjust = 0.5, size = fontsize),
axis.title = element_text(size = fontsize * 1.2),
axis.line = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.title=element_blank(),
legend.position="right",
legend.justification = "center",
legend.text=element_text(size = fontsize),
plot.margin=margin(c(0,0,0,0), unit = "lines"))
return(p_heat)
}
plotHeatmap(sig_mat, cosmicSig[,c(1:4,6,"10a","10b")], fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(c("NpCpG", "APOBEC","dMMR","Tobacco","EPP1","EPP2", "Background"))) +
coord_flip() + scale_y_discrete(position = "right") +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
sig_RData="DP30.AD10.SNV10.input.est.sig.7.RData"
loadPmSig <- function(pmSigRData){
load(pmSigRData)
return(list(G = G, BG_prob = BG_prob, Param = Param))
}
res_pmSig = loadPmSig(sig_RData)
## get signatures matrix
getMutSignatures <- function(Param, sigIndex, lenMotif = 3) {
numBases = Param@flankingBasesNum
bases = c("A","C","G","T")
subs = c("CA", "CG", "CT", "TA", "TC", "TG")
vF <- Param@signatureFeatureDistribution[sigIndex, , ]
sub6 = vF[1, ]
names(sub6) = subs
context = vF[2:(numBases), 1:4]
colnames(context) = bases
motif_16 = context[3,] %*% t(context[2,])
rownames(motif_16) = bases
motif_16 = melt(motif_16, varnames = c("A","B"))
rownames(motif_16) = paste0(motif_16$B,".", motif_16$A)
motif_16[,1:2] = NULL
motif_96 = melt(data.matrix(motif_16) %*% t(sub6), varnames = c("A","B"))
rownames(motif_96) = paste(motif_96$B, motif_96$A)
motif_96[,1:2] = NULL
colnames(motif_96) <- paste0("S", sigIndex)
if(lenMotif == 3){
return(as.matrix(motif_96))
}else{
motif_384 = data.matrix(motif_96) %*% context[1,]
colnames(motif_384) = bases
motif_384 = melt(motif_384, varnames = c("A","B"))
motif_1536 = data.matrix(motif_384[,3]) %*% context[4, ]
colnames(motif_1536) = bases
rownames(motif_1536) = paste(motif_384$A, motif_384$B)
motif_1536 = melt(motif_1536, varnames = c("A","B"))
motif_1536 = cbind(motif_1536, str_split(motif_1536$A, pattern = " ", simplify = T))
rownames(motif_1536) = paste(motif_1536$`1`, paste0(motif_1536$`3`, motif_1536$`2`, motif_1536$B))
motif_1536[,c(1:2,4:6)] = NULL
colnames(motif_1536) <- paste0("S", sigIndex)
return(as.matrix(motif_1536))
}
}
getMatSignatures <- function(Param, BG = NULL, reorderSig = NULL, Signame = NULL, lenMotif = 3){
signatureNum <- Param@signatureNum
subs = c("CA", "CG", "CT", "TA", "TC", "TG")
bases = c("A", "C", "G", "T")
strands = c("+", "-")
if (Param@isBackGround){
BG_signatureNum = signatureNum - 1
}else{
BG_signatureNum = signatureNum
}
if (is.null(reorderSig)) {
reorderSig <- 1:BG_signatureNum
}
sigOrder <- reorderSig
sig_mm <- getMutSignatures(Param, sigOrder[1],lenMotif)
if(BG_signatureNum > 1){
for(i in 2:BG_signatureNum){
sig_mm <- cbind(sig_mm, getMutSignatures(Param, sigOrder[i], lenMotif))
}
}
if(!is.null(BG)){
bg_name = unique(substr(names(BG), 1, 9))
bg_name_2 = sort(c(paste(bg_name, "1", sep=","), paste(bg_name, "2", sep=",")))
BG_new = BG[match(bg_name_2, names(BG))]
names(BG_new) = bg_name_2
BG <- matrix(BG_new, ncol=2, byrow=T)
rownames(BG) <- bg_name
BG[is.na(BG)] <- 0
BG <- BG/sum(BG) # normalize to 1
BG <- as.data.frame(rowSums(BG))
colnames(BG) = "BG"
if(lenMotif == 3){
BG$name <- sapply(rownames(BG),function(x){
name = as.numeric(unlist(strsplit(x, ",")))
return(paste(subs[name[1]], paste0(bases[name[3]], ".", bases[name[4]])))
})
BG = BG %>% group_by(name) %>% summarise(BG=sum(BG)) %>% as.data.frame()
}else{
BG$name <- sapply(rownames(BG),function(x){
name = as.numeric(unlist(strsplit(x, ",")))
return(paste(subs[name[1]], paste0(paste(bases[name[2:3]], collapse = ""), ".",
paste(bases[name[4:5]], collapse = ""))))
})
}
sig_mm <- cbind(sig_mm, Sbg=BG$BG[match(rownames(sig_mm), BG$name)])
}
if (!is.null(Signame)){
colnames(sig_mm) <- Signame
}
return(sig_mm)
}
sig_mat <- getMatSignatures(Param = res_pmSig$Param, BG = res_pmSig$BG_prob, lenMotif = 3,
Signame = c("EPP1","Tobacco", "APOBEC", "NpCpG", "dMMR", "EPP2", "Background"))
sig_mat = sig_mat[,c("NpCpG", "APOBEC","dMMR","Tobacco","EPP1","EPP2", "Background")]
colnames(sig_mat) = paste0("MS", 1:7)
sig_mat
head(sig_mat)
plotHeatmap(sig_mat, cosmicSig[,c(1:4,6,"10a","10b")], fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(c("NpCpG", "APOBEC","dMMR","Tobacco","EPP1","EPP2", "Background"))) +
coord_flip() + scale_y_discrete(position = "right") +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
plotHeatmap(sig_mat, cosmicSig[,c(1:4,6,"10a","10b")], fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
coord_flip() + scale_y_discrete(position = "right") +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
coord_flip() + scale_y_discrete(position = "right") +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
pdf(width = 10, height = 5)
p_heat
plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
coord_flip() + scale_y_discrete(position = "right") +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
dev.off()
plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
coord_flip() +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
coord_flip() +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
p_heat = plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7))) +
coord_flip() + scale_y_discrete(position = "right") +
theme(axis.text.x = element_text(angle = 0),
legend.position = "bottom")
p_heat
pdf(width = 10, height = 3)
p_heat
dev.off()
pdf(width = 15, height = 5)
p_heat
dev.off()
pdf(width = 12, height = 4)
p_heat
dev.off()
plotHeatmap = function(sig_mat, cosmicSig, cosmicSig_list = NULL, plot=T, fontsize = 10, CS = 0.75, sortSig = NULL, plot_margin = c(0,0,0,0)){
Signature_num = ncol(sig_mat)
rownames(sig_mat)<- sub("([ACGTN])([ACGTN]) ([ATCG]).([ATCG])", "\\3[\\1>\\2]\\4", rownames(sig_mat))
sig_mat <-cbind(sig_mat, cosmicSig[match(rownames(sig_mat), rownames(cosmicSig)),])
corr.sig <- sapply(colnames(sig_mat)[1:Signature_num], function(x){
return(sapply(colnames(cosmicSig), function(y){
return(cosine(sig_mat[, x], sig_mat[, y]))
}))
})
if(!plot){
return(corr.sig)
}
m <- melt(corr.sig, varnames = c("A","B"))
m$lab = signif(m$value, 2)
m$lab[which(m$lab < CS)] <- ""
if(!is.null(sortSig)){
m$B <- factor(m$B, levels = sortSig)
}
p_heat <- ggplot(m, aes(x = B, y = A, fill = value)) + geom_tile(color="white", size=0.1) +
geom_text(aes(label=lab), size = fontsize * 4/14, color = "white") +
scale_fill_gradient2(low = "white", high = "grey10") +
labs(y = "COSMIC SBS Signatures", x = "") +
scale_y_discrete(position = "right", breaks = levels(factor(m$A)),
labels = levels(factor(m$A))) +
coord_flip() +
theme(axis.text.x = element_text(hjust = 0, size = fontsize, angle = 0),
axis.text.y = element_text(hjust = 0.5, size = fontsize),
axis.title = element_text(size = fontsize * 1.2),
axis.line = element_blank(),
panel.background = element_blank(),
axis.ticks = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
legend.title=element_blank(),
legend.position="top",
legend.justification = "center",
legend.text=element_text(size = fontsize),
plot.margin=margin(c(0,0,0,0), unit = "lines"))
return(p_heat)
}
p_heat = plotHeatmap(sig_mat, cosmicSig, fontsize = 10, plot_margin = c(0,0,0,0),
CS = 0.75, sortSig = rev(paste0("MS", 1:7)))
p_heat
pdf(width = 12, height = 4)
p_heat
dev.off()
pdf("FigureS2D.pdf", width = 13.5, height = 3.2)
p_heat
dev.off()
load("DP30.AD10.SNV10.input.est.sig.7.RData")
ls()
head(i)
i
RData_list = list.files(".", ".sig.*.RData$", full.names=T)
RData_list
RData_list = list.files(".", "*.RData", full.names=T)
RData_list
Signature_num
